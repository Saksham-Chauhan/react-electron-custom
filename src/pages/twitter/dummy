import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  clearTweetsFeeder,
  fetchAPIlistState,
  fetchApiRotaterIndex,
  fetchFeatureTweetList,
  fetchLatestTweetList,
  fetchThemsState,
  fetchTwitterKeywordList,
  fetchTwitterSettingState,
  fetchTwitterUserList,
  setTwitterSetting,
} from "../../features/counterSlice";

function Twitter() {
  const dispatch = useDispatch();
  const apiList = useSelector(fetchAPIlistState);
  const userList = useSelector(fetchTwitterUserList);
  const [settingPage, setSettingPage] = useState(false);
  const rotaterIndex = useSelector(fetchApiRotaterIndex);
  const keyWordList = useSelector(fetchTwitterKeywordList);
  const latestTweetList = useSelector(fetchLatestTweetList);
  const featureTweetList = useSelector(fetchFeatureTweetList);
  const twitterSetting = useSelector(fetchTwitterSettingState);
  const appTheme = useSelector(fetchThemsState);

  /**
   * function handle navigate to twitter setting page
   **/
  const handleScreen = () => {
    setSettingPage(!settingPage);
  };

  /**
   * function handle clearAll tweets in latest and feature section
   **/
  const handleDeleteAllTweets = (key) => {
    let prevState = { ...twitterSetting };
    if (prevState["twitterMonitor"]) {
      prevState["monitorStartDate"] = new Date().toUTCString();
      dispatch(setTwitterSetting(prevState));
    }
    if (key === "LATEST") {
      dispatch(clearTweetsFeeder(key));
    } else {
      dispatch(clearTweetsFeeder(key));
    }
  };

  return (
    <div className="twitter-page-outer">
      {!settingPage ? (
        <DefaultTwitterScreen
          {...{
            keyWordList,
            userList,
            handleScreen,
            handleToggle,
            twitterSetting,
            latestTweetList,
            featureTweetList,
            handleDeleteAllTweets,
            appTheme,
          }}
        />
      ) : (
        <TwitterSettingScreen
          {...{
            handleScreen,
            latestTweetList,
            apiList,
            rotaterIndex,
            twitterSetting,
          }}
        />
      )}
    </div>
  );
}

export default Twitter;

const DefaultTwitterScreen = ({
  keyWordList,
  userList,
  handleScreen,
  twitterSetting,
  handleToggle,
  latestTweetList,
  featureTweetList,
  handleDeleteAllTweets,
  appTheme,
}) => (
  <React.Fragment>
    <TwitterPageTopSection
      subText={`${Object.keys(latestTweetList).length || 0} tweets`}
    />
    <AppSpacer spacer={20} />
    <div className="twitter-page-section">
      <div className="twitter-page-left-section">
        <TwitterTopLeftSection
          {...{ handleScreen, twitterSetting, handleToggle }}
        />
        <div className="twitter-flex-list-row">
          <TwitterKeywordListSection {...{ keyWordList }} appTheme={appTheme} />
          <TwitterUserListSection {...{ userList }} appTheme={appTheme} />
        </div>
      </div>
      <div className="twitter-page-right-section">
        <div className="twitter-page-card-scroll-flex">
          <div>
            <TwitterPageCardScroll
              list={Object.keys(latestTweetList)
                .map((key) => latestTweetList[key])
                .reverse()}
              title="Latest Tweets"
              onClearTweets={() => handleDeleteAllTweets("LATEST")}
              appTheme={appTheme}
            />
          </div>
          <div>
            <TwitterPageCardScroll
              isFeatureTweet={true}
              list={Object.keys(featureTweetList)
                .map((key) => featureTweetList[key])
                .reverse()}
              twitterSetting={twitterSetting}
              title="Featured Tweets"
              onClearTweets={() => handleDeleteAllTweets("FEATURE")}
              appTheme={appTheme}
            />
          </div>
        </div>
      </div>
    </div>
  </React.Fragment>
);
